package sorting;

public class mergesort {
    static void conquer(int[] arr,int left,int mid,int right){
        int n1=mid-left+1;
        int n2=right-mid;
        int[] L=new int[n1];
        int[] R=new int[n2];
        for(int i=0;i<n1;i++) L[i]=arr[left+i];
        for(int j=0;j<n2;j++) R[j]=arr[mid+1+j];
        int i=0,j=0,k=left;
        while( i< n1 && j < n2){
            if(L[i]<R[j]){
                arr[k]=L[i];
                i++;
            }
            else{
                arr[k]=R[j];
                j++;
            }
            k++;
        }
        while( i < n1){
            arr[k]=L[i];
            i++;
            k++;
        }
        while( j < n2){
            arr[k]=R[j];
            j++;
            k++;
        }
    }
    static void divide(int[] arr,int left,int right){
        if(left < right){
            int mid=(left+right)/2;
//            System.out.println("left = "+left+" mid ="+mid+" right = "+right);
            divide(arr,left,mid);
//            System.out.println(" --> left = "+left+" mid ="+mid+" right = "+right);
            divide(arr,mid+1,right);
//            System.out.println(" ==> left = "+left+" mid ="+mid+" right = "+right);
            
            conquer(arr, left, mid, right);
        }
    }
    void merge(){
        int[] arr={8,9,8,7,6,5,4,3,2,1};
        divide(arr,0,arr.length-1);
        for(int x : arr) System.out.print(x+" ");
    }
}
